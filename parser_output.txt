METHOD_BODY --> STATEMENT_LIST
STATEMENT_LIST --> STATEMENTSTATEMENT_LIST~
STATEMENT --> DECLARATION
DECLARATION --> PRIMITIVE_TYPEid;
PRIMITIVE_TYPE --> int
match 'int'
match 'id'
match ';'
STATEMENT_LIST~ --> ASSIGNMENTSTATEMENT_LIST~
ASSIGNMENT --> idassignEXPRESSION;
match 'id'
matching = failed
EXPRESSION --> SIMPLE_EXPRESSIONEXPRESSION*
SIMPLE_EXPRESSION --> TERMSIMPLE_EXPRESSION~
TERM --> FACTORTERM~
FACTOR --> num
match 'num'
TERM~ --> epsilon
SIMPLE_EXPRESSION~ --> epsilon
EXPRESSION* --> epsilon
match ';'
STATEMENT_LIST~ --> if(EXPRESSION){STATEMENT}else{STATEMENT}STATEMENT_LIST~
match 'if'
match '('
EXPRESSION --> SIMPLE_EXPRESSIONEXPRESSION*
SIMPLE_EXPRESSION --> TERMSIMPLE_EXPRESSION~
TERM --> FACTORTERM~
FACTOR --> id
match 'id'
TERM~ --> epsilon
SIMPLE_EXPRESSION~ --> epsilon
EXPRESSION* --> relopSIMPLE_EXPRESSION
match 'relop'
SIMPLE_EXPRESSION --> TERMSIMPLE_EXPRESSION~
TERM --> FACTORTERM~
FACTOR --> num
match 'num'
TERM~ --> epsilon
SIMPLE_EXPRESSION~ --> epsilon
match ')'
match '{'
STATEMENT --> ASSIGNMENT
ASSIGNMENT --> idassignEXPRESSION;
match 'id'
matching = failed
EXPRESSION --> SIMPLE_EXPRESSIONEXPRESSION*
SIMPLE_EXPRESSION --> TERMSIMPLE_EXPRESSION~
TERM --> FACTORTERM~
FACTOR --> num
match 'num'
TERM~ --> epsilon
SIMPLE_EXPRESSION~ --> epsilon
EXPRESSION* --> epsilon
match ';'
match '}'
match 'else'
match '{'
STATEMENT --> ASSIGNMENT
ASSIGNMENT --> idassignEXPRESSION;
match 'id'
matching = failed
EXPRESSION --> SIMPLE_EXPRESSIONEXPRESSION*
SIMPLE_EXPRESSION --> TERMSIMPLE_EXPRESSION~
TERM --> FACTORTERM~
FACTOR --> num
match 'num'
TERM~ --> epsilon
SIMPLE_EXPRESSION~ --> epsilon
EXPRESSION* --> epsilon
match ';'
match '}'
STATEMENT_LIST~ --> epsilon
match '$'
parsing done successfully
