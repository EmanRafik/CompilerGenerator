METHOD_BODY --> STATEMENT_LIST 
STATEMENT_LIST --> STATEMENT STATEMENT_LIST~ 
STATEMENT --> DECLARATION 
DECLARATION --> PRIMITIVE_TYPE id ; 
PRIMITIVE_TYPE --> int 
match 'int'
match 'id'
match ';'
STATEMENT_LIST~ --> ASSIGNMENT STATEMENT_LIST~ 
ASSIGNMENT --> id = EXPRESSION ; 
match 'id'
match '='
EXPRESSION --> SIMPLE_EXPRESSION EXPRESSION* 
SIMPLE_EXPRESSION --> TERM SIMPLE_EXPRESSION~ 
TERM --> FACTOR TERM~ 
FACTOR --> num 
match 'num'
TERM~ --> epsilon
SIMPLE_EXPRESSION~ --> epsilon
EXPRESSION* --> epsilon
match ';'
STATEMENT_LIST~ --> if ( EXPRESSION ) { STATEMENT } else { STATEMENT } STATEMENT_LIST~ 
match 'if'
match '('
EXPRESSION --> SIMPLE_EXPRESSION EXPRESSION* 
SIMPLE_EXPRESSION --> TERM SIMPLE_EXPRESSION~ 
TERM --> FACTOR TERM~ 
FACTOR --> id 
match 'id'
TERM~ --> epsilon
SIMPLE_EXPRESSION~ --> epsilon
EXPRESSION* --> relop SIMPLE_EXPRESSION 
match 'relop'
SIMPLE_EXPRESSION --> TERM SIMPLE_EXPRESSION~ 
TERM --> FACTOR TERM~ 
FACTOR --> num 
match 'num'
TERM~ --> epsilon
SIMPLE_EXPRESSION~ --> epsilon
match ')'
match '{'
STATEMENT --> ASSIGNMENT 
ASSIGNMENT --> id = EXPRESSION ; 
match 'id'
match '='
EXPRESSION --> SIMPLE_EXPRESSION EXPRESSION* 
SIMPLE_EXPRESSION --> TERM SIMPLE_EXPRESSION~ 
TERM --> FACTOR TERM~ 
FACTOR --> num 
match 'num'
TERM~ --> epsilon
SIMPLE_EXPRESSION~ --> epsilon
EXPRESSION* --> epsilon
match ';'
match '}'
matching $ failed
matching $ failed
synch
matching $ failed
STATEMENT_LIST~ --> epsilon
match '$'
parsing done successfully
